/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Spudmash Media Pty Ltd
 *  Licensed under the MIT License. See License.md in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
use std::clone::Clone;
use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::str::{FromStr, ParseBoolError};

pub enum CountryCode {
    Al,
    Ar,
    Au,
    At,
    Be,
    Ba,
    Br,
    Bg,
    Ca,
    Cl,
    Cr,
    Hr,
    Cy,
    Cz,
    Dk,
    Ee,
    Fi,
    Fr,
    Ge,
    De,
    Gr,
    Hk,
    Hu,
    Is,
    In,
    Id,
    Ie,
    Il,
    It,
    Jp,
    Lv,
    Lu,
    My,
    Mx,
    Md,
    Nl,
    Nz,
    Mk,
    No,
    Pl,
    Pt,
    Ro,
    Rs,
    Sg,
    Sk,
    Si,
    Za,
    Kr,
    Es,
    Se,
    Ch,
    Tw,
    Th,
    Tr,
    Ua,
    Uk,
    Us,
    Vn,
    Empty,
}

impl Display for CountryCode {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        match *self {
            CountryCode::Al => write!(f, "{}", "al"),
            CountryCode::Ar => write!(f, "{}", "ar"),
            CountryCode::Au => write!(f, "{}", "au"),
            CountryCode::At => write!(f, "{}", "at"),
            CountryCode::Be => write!(f, "{}", "be"),
            CountryCode::Ba => write!(f, "{}", "ba"),
            CountryCode::Br => write!(f, "{}", "br"),
            CountryCode::Bg => write!(f, "{}", "bg"),
            CountryCode::Ca => write!(f, "{}", "ca"),
            CountryCode::Cl => write!(f, "{}", "cl"),
            CountryCode::Cr => write!(f, "{}", "cr"),
            CountryCode::Hr => write!(f, "{}", "hr"),
            CountryCode::Cy => write!(f, "{}", "cy"),
            CountryCode::Cz => write!(f, "{}", "cz"),
            CountryCode::Dk => write!(f, "{}", "dk"),
            CountryCode::Ee => write!(f, "{}", "ee"),
            CountryCode::Fi => write!(f, "{}", "fi"),
            CountryCode::Fr => write!(f, "{}", "fr"),
            CountryCode::Ge => write!(f, "{}", "ge"),
            CountryCode::De => write!(f, "{}", "de"),
            CountryCode::Gr => write!(f, "{}", "gr"),
            CountryCode::Hk => write!(f, "{}", "hk"),
            CountryCode::Hu => write!(f, "{}", "hu"),
            CountryCode::Is => write!(f, "{}", "is"),
            CountryCode::In => write!(f, "{}", "in"),
            CountryCode::Id => write!(f, "{}", "id"),
            CountryCode::Ie => write!(f, "{}", "ie"),
            CountryCode::Il => write!(f, "{}", "il"),
            CountryCode::It => write!(f, "{}", "it"),
            CountryCode::Jp => write!(f, "{}", "jp"),
            CountryCode::Lv => write!(f, "{}", "lv"),
            CountryCode::Lu => write!(f, "{}", "lu"),
            CountryCode::My => write!(f, "{}", "my"),
            CountryCode::Mx => write!(f, "{}", "mx"),
            CountryCode::Md => write!(f, "{}", "md"),
            CountryCode::Nl => write!(f, "{}", "nl"),
            CountryCode::Nz => write!(f, "{}", "nz"),
            CountryCode::Mk => write!(f, "{}", "mk"),
            CountryCode::No => write!(f, "{}", "no"),
            CountryCode::Pl => write!(f, "{}", "pl"),
            CountryCode::Pt => write!(f, "{}", "pt"),
            CountryCode::Ro => write!(f, "{}", "ro"),
            CountryCode::Rs => write!(f, "{}", "rs"),
            CountryCode::Sg => write!(f, "{}", "sg"),
            CountryCode::Sk => write!(f, "{}", "sk"),
            CountryCode::Si => write!(f, "{}", "si"),
            CountryCode::Za => write!(f, "{}", "za"),
            CountryCode::Kr => write!(f, "{}", "kr"),
            CountryCode::Es => write!(f, "{}", "es"),
            CountryCode::Se => write!(f, "{}", "se"),
            CountryCode::Ch => write!(f, "{}", "ch"),
            CountryCode::Tw => write!(f, "{}", "tw"),
            CountryCode::Th => write!(f, "{}", "th"),
            CountryCode::Tr => write!(f, "{}", "tr"),
            CountryCode::Ua => write!(f, "{}", "ua"),
            CountryCode::Uk => write!(f, "{}", "uk"),
            CountryCode::Us => write!(f, "{}", "us"),
            CountryCode::Vn => write!(f, "{}", "vn"),
            CountryCode::Empty => write!(f, "{}", ""),
        }
    }
}

impl FromStr for CountryCode {
    type Err = ParseBoolError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let item = &s.trim().to_lowercase();

        let result = match item.as_ref() {
            "al" => CountryCode::Al,
            "ar" => CountryCode::Ar,
            "au" => CountryCode::Au,
            "at" => CountryCode::At,
            "be" => CountryCode::Be,
            "ba" => CountryCode::Ba,
            "br" => CountryCode::Br,
            "bg" => CountryCode::Bg,
            "ca" => CountryCode::Ca,
            "cl" => CountryCode::Cl,
            "cr" => CountryCode::Cr,
            "hr" => CountryCode::Hr,
            "cy" => CountryCode::Cy,
            "cz" => CountryCode::Cz,
            "dk" => CountryCode::Dk,
            "ee" => CountryCode::Ee,
            "fi" => CountryCode::Fi,
            "fr" => CountryCode::Fr,
            "ge" => CountryCode::Ge,
            "de" => CountryCode::De,
            "gr" => CountryCode::Gr,
            "hk" => CountryCode::Hk,
            "hu" => CountryCode::Hu,
            "is" => CountryCode::Is,
            "in" => CountryCode::In,
            "id" => CountryCode::Id,
            "ie" => CountryCode::Ie,
            "il" => CountryCode::Il,
            "it" => CountryCode::It,
            "jp" => CountryCode::Jp,
            "lv" => CountryCode::Lv,
            "lu" => CountryCode::Lu,
            "my" => CountryCode::My,
            "mx" => CountryCode::Mx,
            "md" => CountryCode::Md,
            "nl" => CountryCode::Nl,
            "nz" => CountryCode::Nz,
            "mk" => CountryCode::Mk,
            "no" => CountryCode::No,
            "pl" => CountryCode::Pl,
            "pt" => CountryCode::Pt,
            "ro" => CountryCode::Ro,
            "rs" => CountryCode::Rs,
            "sg" => CountryCode::Sg,
            "sk" => CountryCode::Sk,
            "si" => CountryCode::Si,
            "za" => CountryCode::Za,
            "kr" => CountryCode::Kr,
            "es" => CountryCode::Es,
            "se" => CountryCode::Se,
            "ch" => CountryCode::Ch,
            "tw" => CountryCode::Tw,
            "th" => CountryCode::Th,
            "tr" => CountryCode::Tr,
            "ua" => CountryCode::Ua,
            "uk" => CountryCode::Uk,
            "us" => CountryCode::Us,
            "vn" => CountryCode::Vn,
            "empty" => CountryCode::Empty,
            "" => CountryCode::Empty,
            _ => CountryCode::Empty,
        };

        Ok(result)
    }
}

impl Debug for CountryCode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("CountryCode").finish()
    }
}

impl Clone for CountryCode {
    fn clone(&self) -> CountryCode {
        match *self {
            CountryCode::Al => CountryCode::Al,
            CountryCode::Ar => CountryCode::Ar,
            CountryCode::Au => CountryCode::Au,
            CountryCode::At => CountryCode::At,
            CountryCode::Be => CountryCode::Be,
            CountryCode::Ba => CountryCode::Ba,
            CountryCode::Br => CountryCode::Br,
            CountryCode::Bg => CountryCode::Bg,
            CountryCode::Ca => CountryCode::Ca,
            CountryCode::Cl => CountryCode::Cl,
            CountryCode::Cr => CountryCode::Cr,
            CountryCode::Hr => CountryCode::Hr,
            CountryCode::Cy => CountryCode::Cy,
            CountryCode::Cz => CountryCode::Cz,
            CountryCode::Dk => CountryCode::Dk,
            CountryCode::Ee => CountryCode::Ee,
            CountryCode::Fi => CountryCode::Fi,
            CountryCode::Fr => CountryCode::Fr,
            CountryCode::Ge => CountryCode::Ge,
            CountryCode::De => CountryCode::De,
            CountryCode::Gr => CountryCode::Gr,
            CountryCode::Hk => CountryCode::Hk,
            CountryCode::Hu => CountryCode::Hu,
            CountryCode::Is => CountryCode::Is,
            CountryCode::In => CountryCode::In,
            CountryCode::Id => CountryCode::Id,
            CountryCode::Ie => CountryCode::Ie,
            CountryCode::Il => CountryCode::Il,
            CountryCode::It => CountryCode::It,
            CountryCode::Jp => CountryCode::Jp,
            CountryCode::Lv => CountryCode::Lv,
            CountryCode::Lu => CountryCode::Lu,
            CountryCode::My => CountryCode::My,
            CountryCode::Mx => CountryCode::Mx,
            CountryCode::Md => CountryCode::Md,
            CountryCode::Nl => CountryCode::Nl,
            CountryCode::Nz => CountryCode::Nz,
            CountryCode::Mk => CountryCode::Mk,
            CountryCode::No => CountryCode::No,
            CountryCode::Pl => CountryCode::Pl,
            CountryCode::Pt => CountryCode::Pt,
            CountryCode::Ro => CountryCode::Ro,
            CountryCode::Rs => CountryCode::Rs,
            CountryCode::Sg => CountryCode::Sg,
            CountryCode::Sk => CountryCode::Sk,
            CountryCode::Si => CountryCode::Si,
            CountryCode::Za => CountryCode::Za,
            CountryCode::Kr => CountryCode::Kr,
            CountryCode::Es => CountryCode::Es,
            CountryCode::Se => CountryCode::Se,
            CountryCode::Ch => CountryCode::Ch,
            CountryCode::Tw => CountryCode::Tw,
            CountryCode::Th => CountryCode::Th,
            CountryCode::Tr => CountryCode::Tr,
            CountryCode::Ua => CountryCode::Ua,
            CountryCode::Uk => CountryCode::Uk,
            CountryCode::Us => CountryCode::Us,
            CountryCode::Vn => CountryCode::Vn,
            CountryCode::Empty => CountryCode::Empty,
        }
    }
}
